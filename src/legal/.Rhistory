group_by(TARGET) %>%
summarise(n_adj = n()) %>%
left_join(., dfx %>%
filter(context == 'court') %>%
group_by(TARGET) %>%
summarise(n_TARGET = n()))
aggr
aggr <- dfx %>%
filter(context == 'court') %>%
group_by(TARGET, ADJ) %>%
summarise(n=n()) %>%
mutate(perc=n/sum(n))
aggr
aggr <- dfx %>%
filter(context == 'court') %>%
group_by(TARGET, ADJ) %>%
summarise(n=n()) %>%
mutate(perc=n/sum(n)) %>%
top_n(n=10, wt=perc)
aggr
ggplot(aggr) +
geom_bar(aes(x=TARGET, y=perc, fill=ADJ), stat = 'identity')
aggr <- dfx %>%
filter(context == 'court') %>%
group_by(TARGET, ADJ) %>%
summarise(n=n()) %>%
mutate(perc=n/sum(n)) %>%
top_n(n=10, wt=perc) %>%
arrange(desc(perc))
ggplot(aggr) +
geom_bar(aes(x=TARGET, y=perc, fill=ADJ), stat = 'identity')
ggplot(aggr) +
geom_bar(aes(x=TARGET, y=perc, fill=ADJ), stat = 'identity', position = 'fill')
aggr <- dfx %>%
filter(context == 'court') %>%
group_by(TARGET, ADJ) %>%
summarise(n=n()) %>%
mutate(perc=n/sum(n)) %>%
top_n(n=10, wt=perc) %>%
arrange(desc(perc))
ggplot(aggr) +
geom_point(aes(x=TARGET, y=perc, label=ADJ))
ggplot(aggr) +
geom_point(aes(x = TARGET, y = perc)) +
geom_text_repel(aes(label = ADJ))
ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ))
ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET)
ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET, scales = 'free_x')
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET, scales = 'free_x')
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = 'percent')
p
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent())
scale_y_continuous(labels = scales::percent
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent)
p
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NA) +
labs(
x = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NA) +
labs(
x = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/top10_conjoined_ADJ.png', width = 11, height = 6)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ)) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NULL) +
labs(
x = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/top10_conjoined_ADJ.png', width = 11, height = 6)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ), size = 1) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NULL) +
labs(
x = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/top10_conjoined_ADJ.png', width = 11, height = 6)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ), size = 2) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NULL) +
labs(
x = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/top10_conjoined_ADJ.png', width = 11, height = 6)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ), size = 2, segment.size = .5) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NULL) +
labs(
x = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/top10_conjoined_ADJ.png', width = 11, height = 6)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point() +
geom_text_repel(aes(label = ADJ), size = 2, segment.size = .1) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NULL) +
labs(
x = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/top10_conjoined_ADJ.png', width = 11, height = 6)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point(size=1) +
geom_text_repel(aes(label = ADJ), size = 2, segment.size = .1) +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NULL) +
labs(
x = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/top10_conjoined_ADJ.png', width = 11, height = 6)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point(size=.8) +
geom_text_repel(aes(label = ADJ), size = 2, segment.size = .1) +
geom_hline(aes(yintercept=0.25), lty = 'dashed') +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NULL) +
labs(
x = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/top10_conjoined_ADJ.png', width = 11, height = 6)
p <- ggplot(aggr, aes(x = TARGET, y = perc)) +
geom_point(size=.8) +
geom_text_repel(aes(label = ADJ), size = 2, segment.size = .1) +
geom_hline(aes(yintercept=0.25), lty = 'dashed') +
facet_wrap(~TARGET, scales = 'free_x') +
scale_y_continuous(labels = scales::percent) +
scale_x_discrete(labels = NULL) +
labs(
x = '',
y = '',
title = 'Share of the top 10 conjoined ADJ on total instances of TARGET structures'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/top10_conjoined_ADJ.png', width = 11, height = 6)
### have a look at distrubution of adjectives
aggr <- dfx %>%
filter(context == 'court') %>%
mutate(mod_dummy = ifelse(is.na(TARGET_mod)&is.na(ADV), 0, 1)) %>%
group_by(TARGET, ADJ) %>%
summarise(n=n(), sentiWords = unique(sentiWords)) %>%
mutate(perc=n/sum(n))
ggplot(aggr, aes(x = sentiWords, y = perc)) +
geom_point(alpha=.2) +
geom_density_2d() +
facet_wrap(~TARGET, scales = 'free_y')
ggplot(dfx, aes(x = year, y = sentiWords)) +
geom_density_2d() +
facet_wrap(~TARGET)
ggplot(dfx, aes(x = year, y = sentiWords)) +
geom_density_2d() +
facet_wrap(~TARGET) +
labs(
title = 'Sentiment mapping over time'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggplot(dfx, aes(x = year, y = sentiWords)) +
geom_density_2d() +
facet_wrap(~TARGET) +
geom_point(size=1, alpha =.2) +
geom_smooth() +
labs(
title = 'Sentiment mapping over time'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggplot(dfx %>%
filter(context == 'court'), aes(x = year, y = sentiWords)) +
geom_density_2d() +
facet_wrap(~TARGET) +
geom_point(size=1, alpha =.2) +
geom_smooth() +
labs(
title = 'Sentiment mapping over time'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggplot(dfx %>%
filter(context == 'court'), aes(x = year, y = sentiWords)) +
geom_density_2d() +
facet_wrap(~TARGET) +
#geom_point(size=1, alpha =.2) +
geom_smooth() +
labs(
title = 'Sentiment mapping over time'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggplot(dfx %>%
filter(context == 'court'), aes(x = year, y = sentiWords)) +
geom_hline(aes(yintercept=0.25), lty = 'dashed') +
geom_smooth(aes(colour = TARGET, fill = TARGET)) +
geom_density_2d() +
facet_wrap(~TARGET) +
labs(
title = 'Sentiment mapping over time'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggplot(dfx %>%
filter(context == 'court'), aes(x = year, y = sentiWords)) +
geom_hline(aes(yintercept=0.25), lty = 'dashed') +
geom_smooth(aes(colour = TARGET, fill = TARGET)) +
geom_density_2d(alpha = .2) +
facet_wrap(~TARGET) +
labs(
title = 'Sentiment mapping over time'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggplot(dfx %>%
filter(context == 'court'), aes(x = year, y = sentiWords)) +
geom_hline(aes(yintercept=0.25), lty = 'dashed') +
geom_smooth(colour = 'black', fill='black') +
geom_density_2d(alpha = .2) +
facet_wrap(~TARGET) +
labs(
title = 'Sentiment mapping over time'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggplot(dfx %>%
filter(context == 'court'), aes(x = year, y = sentiWords)) +
geom_hline(aes(yintercept=0.25), lty = 'dashed') +
geom_smooth(colour = 'black', fill='black', size = 1) +
geom_density_2d(alpha = .2) +
facet_wrap(~TARGET) +
labs(
title = 'Sentiment mapping over time'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggplot(dfx %>%
filter(context == 'court'), aes(x = year, y = sentiWords)) +
geom_hline(aes(yintercept=0.25), lty = 'dashed') +
geom_smooth(colour = 'black', fill='black', size = .5) +
geom_density_2d(alpha = .2) +
facet_wrap(~TARGET) +
labs(
title = 'Sentiment mapping over time'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggplot(dfx %>%
filter(context == 'court'), aes(x = year, y = sentiWords)) +
geom_hline(aes(yintercept=0.25), lty = 'dashed') +
geom_smooth(colour = 'black', fill='black', size = .5) +
geom_density_2d(alpha = .2) +
facet_wrap(~TARGET) +
labs(
title = 'Sentiment mapping over time',
subtitle = 'Variance of the sentiment of the conjoined ADJ over time.'
) +
theme(
plot.title = element_text(face= 'bold')
)
p <- ggplot(dfx %>%
filter(context == 'court'), aes(x = year, y = sentiWords)) +
geom_hline(aes(yintercept=0.25), lty = 'dashed') +
geom_smooth(colour = 'black', fill='black', size = .5) +
geom_density_2d(alpha = .2) +
facet_wrap(~TARGET) +
labs(
title = 'Sentiment mapping over time',
subtitle = 'Variance of the sentiment of the conjoined ADJ over time.'
) +
theme(
plot.title = element_text(face= 'bold')
)
ggsave(p, filename = '../output/03-results/plots/sentiment_mapping_over_time.png', width = 11, height = 6)
library(stringr)
library(stringi)
library(spacyr)
library(gtools)
library(tokenizers)
rm(list=ls())
setwd('~/legal_tc/src/legal/')
datasets <- list.files('../../output/01-reduced-corpora/legal', full.names = T)
search.terms <- read.table('../../input/dict-2.txt', header = T, stringsAsFactors = F, sep=',')
syntax.regex <- '(ADV\\s)?ADJ\\s(PUNCT\\s)?CCONJ\\s(ADV\\s)?ADJ'
make_regex <- function(INDEX){
TARGET = paste0('\\\\b',df$TARGET[INDEX], '\\\\b')
LEMMA = paste0(txtparsed[[INDEX]], collapse = ' ')
SYNTAX = paste0(names(txtparsed[[INDEX]]), collapse = ' ')
SYNTAX <- unlist(str_extract(SYNTAX, syntax.regex))
SYNTAX <- unique(SYNTAX)
tmp <- str_replace_all(SYNTAX, c(
'ADV' = '\\\\w+',
'CCONJ' = 'and',
'PUNCT' = '\\\\,'
))
regex1 <- sub('ADJ', TARGET, tmp)
regex1 <- str_replace_all(regex1, c(
' ' = '\\\\s',
'ADJ' = '\\\\w+'
))
regex2 <- stri_replace_last(tmp, replacement = TARGET, regex = 'ADJ')
regex2 <- str_replace_all(regex2, c(
' ' = '\\\\s',
'ADJ' = '\\\\w+'
))
match1 <- unlist(str_extract_all(LEMMA, regex1))
match2 <- unlist(str_extract_all(LEMMA, regex2))
MATCH <- unique(unlist(c(match1, match2)))
if(length(MATCH)==0){return(NULL)}else{
tryCatch(tmp <- lapply(MATCH, function(y){
POS <- spacy_parse(y, pos = T)
if(paste0(POS$pos, collapse = ' ') %in% SYNTAX){
ADJ <- filter(POS, pos == 'ADJ' & !lemma == df$TARGET[INDEX])$lemma
TARGET_mod <- filter(POS, (pos == 'ADJ' & lemma == df$TARGET[INDEX]) | pos == 'ADV')
TARGET_mod <- TARGET_mod$lemma[TARGET_mod$pos == 'ADV' & TARGET_mod$token_id == TARGET_mod$token_id[TARGET_mod$pos == 'ADJ'] - 1]
TARGET_mod <- ifelse(identical(TARGET_mod, character(0)), NA, TARGET_mod)
ADV <- filter(POS, (pos == 'ADJ' & !lemma == df$TARGET[INDEX]) | pos == 'ADV')
ADV <- ADV$lemma[ADV$pos == 'ADV' & ADV$token_id == ADV$token_id[ADV$pos == 'ADJ'] - 1]
ADV <- ifelse(identical(ADV, character(0)), NA, ADV)
first <- filter(POS, pos == 'ADJ')
first <- ifelse(first$token_id[first$lemma == df$TARGET[INDEX]] < first$token_id[!first$lemma == df$TARGET[INDEX]], 1, 0)
dta <- tibble(match = y, ADJ, TARGET_mod, ADV, first)
return(dta)
}
}), warning = function(e) print(INDEX), error = function(e) print(INDEX))
tmp <- do.call(rbind, tmp)
return(tmp)
}
}
datasets
datasets <- datasets[!grepl('scotus', datasets)]
datasets
library(stringr)
library(stringi)
library(spacyr)
library(gtools)
library(tokenizers)
library(dplyr)
rm(list=ls())
setwd('~/legal_tc/src/legal/')
datasets <- list.files('../../output/01-reduced-corpora/legal', full.names = T)
datasets <- datasets[!grepl('scotus', datasets)]
search.terms <- read.table('../../input/dict-2.txt', header = T, stringsAsFactors = F, sep=',')
syntax.regex <- '(ADV\\s)?ADJ\\s(PUNCT\\s)?CCONJ\\s(ADV\\s)?ADJ'
make_regex <- function(INDEX){
TARGET = paste0('\\\\b',df$TARGET[INDEX], '\\\\b')
LEMMA = paste0(txtparsed[[INDEX]], collapse = ' ')
SYNTAX = paste0(names(txtparsed[[INDEX]]), collapse = ' ')
SYNTAX <- unlist(str_extract(SYNTAX, syntax.regex))
SYNTAX <- unique(SYNTAX)
tmp <- str_replace_all(SYNTAX, c(
'ADV' = '\\\\w+',
'CCONJ' = 'and',
'PUNCT' = '\\\\,'
))
regex1 <- sub('ADJ', TARGET, tmp)
regex1 <- str_replace_all(regex1, c(
' ' = '\\\\s',
'ADJ' = '\\\\w+'
))
regex2 <- stri_replace_last(tmp, replacement = TARGET, regex = 'ADJ')
regex2 <- str_replace_all(regex2, c(
' ' = '\\\\s',
'ADJ' = '\\\\w+'
))
match1 <- unlist(str_extract_all(LEMMA, regex1))
match2 <- unlist(str_extract_all(LEMMA, regex2))
MATCH <- unique(unlist(c(match1, match2)))
if(length(MATCH)==0){return(NULL)}else{
tryCatch(tmp <- lapply(MATCH, function(y){
POS <- spacy_parse(y, pos = T)
if(paste0(POS$pos, collapse = ' ') %in% SYNTAX){
ADJ <- filter(POS, pos == 'ADJ' & !lemma == df$TARGET[INDEX])$lemma
TARGET_mod <- filter(POS, (pos == 'ADJ' & lemma == df$TARGET[INDEX]) | pos == 'ADV')
TARGET_mod <- TARGET_mod$lemma[TARGET_mod$pos == 'ADV' & TARGET_mod$token_id == TARGET_mod$token_id[TARGET_mod$pos == 'ADJ'] - 1]
TARGET_mod <- ifelse(identical(TARGET_mod, character(0)), NA, TARGET_mod)
ADV <- filter(POS, (pos == 'ADJ' & !lemma == df$TARGET[INDEX]) | pos == 'ADV')
ADV <- ADV$lemma[ADV$pos == 'ADV' & ADV$token_id == ADV$token_id[ADV$pos == 'ADJ'] - 1]
ADV <- ifelse(identical(ADV, character(0)), NA, ADV)
first <- filter(POS, pos == 'ADJ')
first <- ifelse(first$token_id[first$lemma == df$TARGET[INDEX]] < first$token_id[!first$lemma == df$TARGET[INDEX]], 1, 0)
dta <- tibble(match = y, ADJ, TARGET_mod, ADV, first)
return(dta)
}
}), warning = function(e) print(INDEX), error = function(e) print(INDEX))
tmp <- do.call(rbind, tmp)
return(tmp)
}
}
for(i in datasets){
#i=datasets[1]
load(i)
df <- mutate(df, TARGET = strsplit(gsub('\\,', '', match), '\\s'))
df <- mutate(df, CCONJ = sapply(TARGET, function(x) return(x[x %in% c('and', 'or')][1])))
df <- mutate(df, TARGET = sapply(TARGET, function(x) return(x[x %in% search.terms$word][1])))
df <- mutate(df, comma = grepl('\\,', match))
txtparsed <- spacy_parse(tolower(df$corpus), pos = TRUE)
txtparsed <- split(txtparsed, txtparsed$doc_id, lex.order = F)
txtparsed <- txtparsed[mixedsort(names(txtparsed))]
txtparsed <- pbmclapply(txtparsed, function(x) x$lemma %>% setNames(., x$pos), mc.cores = 4)
system.time(txtparsed_adj <- pbmclapply(1:length(txtparsed), function(g) tryCatch(make_regex(INDEX = g), error = function(e) return(NULL)),  mc.cores = 4))
#df <- rename(df, comma_check = comma, TARGET_check = TARGET, CCONJ_check = CCONJ)
reps <- unlist(lapply(sapply(txtparsed_adj, nrow), function(x) ifelse(is.null(x), 0, x)))
df <- df[rep(1:nrow(df), reps),]
txtparsed_adj <- do.call(rbind, txtparsed_adj)
#txtparsed_adj <- mutate(txtparsed_adj, id=df$id)
#txtparsed_adj <- select(txtparsed_adj, -id)
df <- rename(df, match_first = match)
df <- cbind(df, txtparsed_adj)
df <- as_tibble(df)
#table(df$TARGET)
df <- filter(df, TARGET%in%search.terms$word)
out <- paste0('../../output/02-finalized-corpora/legal/', gsub('.*\\/', '', i))
save(df, file=out)
rm(list = c('df', 'txtparsed', 'txtparsed_adj'))
}
spacy_inititialize()
library(spacyr)
devtools::install_github("kbenoit/spacyr", build_vignettes = FALSE)
