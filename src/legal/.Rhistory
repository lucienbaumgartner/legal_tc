keyword = tolower(keyword),
CCONJ = str_extract(keyword, '\\band\\b|\\bbut\\b'),
comma = str_extract(keyword, '\\,'))
annot <- strsplit(dfx2$keyword, '\\s')
nannot <- strsplit(dfx2$pattern, '')
for(i in 1:length(annot)) names(annot[[i]]) <- nannot[[i]]
for(i in 1:length(annot)) annot[[i]] <- as_tibble(t(annot[[i]]), .name_repair = 'unique')
library(data.table)
annot <- rbindlist(annot, fill=TRUE)
annot <- annot[, c('A...1', 'A...3', 'A...4', 'M', 'M...1', 'C')]
annot <- rename(annot, ADJ1 = 'A...1', ADJ2 = 'A...3', ADJ_repair = 'A...4', M1 = 'M', M2 = 'M...1')
annot <- mutate(annot, ADJ2 = ifelse(is.na(ADJ2) & !is.na(ADJ_repair), ADJ_repair, ADJ2)) %>%
select(- ADJ_repair)
dfx2 <- as_tibble(cbind(dfx2, annot))
dfx2 <- filter(dfx2, !(is.na(ADJ1)|is.na(ADJ2)))
combos <- apply(dfx2[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos
combos <- table(combos)
p <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos
)
p
annot
dfx2 <- filter(dfx, grepl('\\band|but\\b', keyword))
dfx2 <- filter(dfx, !grepl('[0-9]+', keyword))
dfx2 <- mutate(dfx2,
keyword = tolower(keyword),
CCONJ = str_extract(keyword, '\\band\\b|\\bbut\\b'),
comma = str_extract(keyword, '\\,'))
annot <- strsplit(dfx2$keyword, '\\s')
nannot <- strsplit(dfx2$pattern, '')
for(i in 1:length(annot)) names(annot[[i]]) <- nannot[[i]]
for(i in 1:length(annot)) annot[[i]] <- as_tibble(t(annot[[i]]), .name_repair = 'unique')
library(data.table)
annot <- rbindlist(annot, fill=TRUE)
annot <- annot[, c('A...1', 'A...3', 'A...4', 'M', 'M...1', 'C')]
annot <- rename(annot, ADJ1 = 'A...1', ADJ2 = 'A...3', ADJ_repair = 'A...4', M1 = 'M', M2 = 'M...1')
dfx2
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/00-bulk-data/legal/')
fileslist
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/00-bulk-data/legal/', full.names = T)
fileslist
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/00-bulk-data/legal', full.names = T)
fileslist
i = fileslist[1]
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load udpipe model
udmodel <-'/Users/lucienbaumgartner/legal_tc/input/english-ewt-ud-2.4-190531.udpipe'
udmodel <- udpipe_load_model(udmodel)
#iterators
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/00-bulk-data/legal', full.names = T)
i = fileslist[1]
#i = fileslist[1]
load(i)
set.seed(123456)
df <- df[sample(1:nrow(df), 2000),]
dfx <- pbmclapply(1:length(df),
function(x){
tmp <- df$txt[x]
tmp <- spacyr::spacy_parse(tmp)
#tmp <- udpipe::udpipe_annotate(udmodel, tmp)
#tmp <- as.data.frame(tmp)
tmp$phrase_tag <- as_phrasemachine(tmp$pos, type = "upos")
#tmp$phrase_tag <- as_phrasemachine(tmp$xpos, type = "penn-treebank")
nounphrases <-
keywords_phrases(tmp$phrase_tag, term = tmp$token,
pattern = "(M)*A(,|O)*C(,|O)*(M)*A",
is_regex = TRUE, detailed = T,
ngram_max = 6)
nounphrases <- nounphrases %>% arrange(start, desc(ngram)) %>% filter(!(duplicated(start)|duplicated(end)))
nounphrases <- mutate(nounphrases, doc_id = x)
rm(tmp)
return(nounphrases)
}, mc.cores = 6
)
#i = fileslist[1]
load(i)
set.seed(123456)
df <- df[sample(1:nrow(df), 2000),]
dfx <- pbmclapply(1:nrow(df),
function(x){
tmp <- df$txt[x]
tmp <- spacyr::spacy_parse(tmp)
#tmp <- udpipe::udpipe_annotate(udmodel, tmp)
#tmp <- as.data.frame(tmp)
tmp$phrase_tag <- as_phrasemachine(tmp$pos, type = "upos")
#tmp$phrase_tag <- as_phrasemachine(tmp$xpos, type = "penn-treebank")
nounphrases <-
keywords_phrases(tmp$phrase_tag, term = tmp$token,
pattern = "(M)*A(,|O)*C(,|O)*(M)*A",
is_regex = TRUE, detailed = T,
ngram_max = 6)
nounphrases <- nounphrases %>% arrange(start, desc(ngram)) %>% filter(!(duplicated(start)|duplicated(end)))
nounphrases <- mutate(nounphrases, doc_id = x)
rm(tmp)
return(nounphrases)
}, mc.cores = 6
)
dfx <- do.call(rbind, dfx)
dfx <- filter(dfx, grepl('\\band|but\\b', keyword))
dfx <- filter(dfx, !grepl('[0-9]+', keyword))
df <- mutate(dfx,
keyword = tolower(keyword),
CCONJ = str_extract(keyword, '\\band\\b|\\bbut\\b'),
comma = str_extract(keyword, '\\,'))
df
paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach/', gsub('.*\\/', '', i))
save(df, file = paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach/', gsub('.*\\/', '', i)))
for(i in fileslist[-1]){
#i = fileslist[1]
load(i)
set.seed(123456)
df <- df[sample(1:nrow(df), 2000),]
dfx <- pbmclapply(1:nrow(df),
function(x){
tmp <- df$txt[x]
tmp <- spacyr::spacy_parse(tmp)
#tmp <- udpipe::udpipe_annotate(udmodel, tmp)
#tmp <- as.data.frame(tmp)
tmp$phrase_tag <- as_phrasemachine(tmp$pos, type = "upos")
#tmp$phrase_tag <- as_phrasemachine(tmp$xpos, type = "penn-treebank")
nounphrases <-
keywords_phrases(tmp$phrase_tag, term = tmp$token,
pattern = "(M)*A(,|O)*C(,|O)*(M)*A",
is_regex = TRUE, detailed = T,
ngram_max = 6)
nounphrases <- nounphrases %>% arrange(start, desc(ngram)) %>% filter(!(duplicated(start)|duplicated(end)))
nounphrases <- mutate(nounphrases, doc_id = x)
rm(tmp)
return(nounphrases)
}, mc.cores = 6
)
dfx <- do.call(rbind, dfx)
dfx <- filter(dfx, grepl('\\band|but\\b', keyword))
dfx <- filter(dfx, !grepl('[0-9]+', keyword))
df <- mutate(dfx,
keyword = tolower(keyword),
CCONJ = str_extract(keyword, '\\band\\b|\\bbut\\b'),
comma = str_extract(keyword, '\\,'))
save(df, file = paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach/', gsub('.*\\/', '', i)))
}
#iterators
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/01-inductive-approach/', full.names = T)
fileslist
#iterators
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/01-inductive-approach', full.names = T)
fileslist
i = fileslist[1]
#i = fileslist[1]
load(i)
df <- do.call(rbind, df)
df <- filter(df, grepl('\\band|but\\b', keyword))
df
#i = fileslist[1]
load(i)
df
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(i in 1:length(annot)) names(annot[[i]]) <- nannot[[i]]
for(i in 1:length(annot)) annot[[i]] <- suppress_messages(as_tibble(t(annot[[i]]), .name_repair = 'unique'))
for(i in 1:length(annot)) annot[[i]] <- suppressMessages(as_tibble(t(annot[[i]]), .name_repair = 'unique'))
annot
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
annot
for(i in 1:length(annot)) names(annot[[i]]) <- nannot[[i]]
t(annot[[i]])
as.data.frame(t(annot[[i]]))
as_tibble(as.data.frame(t(annot[[i]])), .name_repair = 'unique')
as.data.frame(t(annot[[i]]), make.names = T)
data.frame(t(annot[[i]]))
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(i in 1:length(annot)) names(annot[[i]]) <- nannot[[i]]
for(i in 1:length(annot)) annot[[i]] <- suppressMessages(data.frame(t(annot[[i]])))
head(annot)
annot <- rbindlist(annot, fill=TRUE)
annot
grep('O', names(annot))
annot[, !grep('O', names(annot))]
annot[, !grep('O', names(annot), value=T)]
grep('O', names(annot), value=T)
annot[, grep('[O]', names(annot), value=T)]
grep('O', names(annot), value=T)
select(annot, - grep('O', names(annot), value=T))
annot <- select(annot, - grep('O', names(annot), value=T))
df <- as_tibble(cbind(df, annot))
df
rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
df <- rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
df <- filter(df, !(is.na(ADJ1)|is.na(ADJ2)))
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
p <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos
)
p
i
i = fileslist[1]
i
paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ/', gsub('.*\\/', '', i))
#i = fileslist[1]
load(i)
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(i in 1:length(annot)) names(annot[[i]]) <- nannot[[i]]
for(i in 1:length(annot)) annot[[i]] <- suppressMessages(data.frame(t(annot[[i]])))
annot <- rbindlist(annot, fill=TRUE)
annot <- select(annot, - grep('O', names(annot), value=T))
df <- as_tibble(cbind(df, annot))
df <- rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
df <- filter(df, !(is.na(ADJ1)|is.na(ADJ2)))
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
p <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/', '', i)
)
p
#i = fileslist[1]
load(i)
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(k in 1:length(annot)) names(annot[[k]]) <- nannot[[k]]
i = fileslist[1]
#i = fileslist[1]
load(i)
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(k in 1:length(annot)) names(annot[[k]]) <- nannot[[k]]
for(k in 1:length(annot)) annot[[k]] <- suppressMessages(data.frame(t(annot[[k]])))
annot <- rbindlist(annot, fill=TRUE)
annot <- select(annot, - grep('O', names(annot), value=T))
df <- as_tibble(cbind(df, annot))
df <- rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
df <- filter(df, !(is.na(ADJ1)|is.na(ADJ2)))
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
p <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/', '', i)
)
p
p <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/|\\.RDS', '', i)
)
p
#i = fileslist[1]
load(i)
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(k in 1:length(annot)) names(annot[[k]]) <- nannot[[k]]
for(k in 1:length(annot)) annot[[k]] <- suppressMessages(data.frame(t(annot[[k]])))
annot <- rbindlist(annot, fill=TRUE)
annot <- select(annot, - grep('O', names(annot), value=T))
df <- as_tibble(cbind(df, annot))
df <- rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
df <- filter(df, !(is.na(ADJ1)|is.na(ADJ2)))
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
p <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/|\\.RDS', '', i)
)
p
save(p, file = paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ/', gsub('.*\\/', '', i)))
df
names(df) <- gsub('\\s', '', names(df))
df
names(df) <- gsub('\\.', '', names(df))
df
df <- filter(df, !(M %in% c('too', 'not', 'less') | M1 %in% c('too', 'not', 'less') | M2 %in% c('too', 'not', 'less')))
df
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
p <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/|\\.RDS', '', i)
)
p
save(p, file = paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ/', gsub('.*\\/', '', i)))
for(i in fileslist[-1]){
#i = fileslist[1]
print(i)
load(i)
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(k in 1:length(annot)) names(annot[[k]]) <- nannot[[k]]
for(k in 1:length(annot)) annot[[k]] <- suppressMessages(data.frame(t(annot[[k]])))
annot <- rbindlist(annot, fill=TRUE)
annot <- select(annot, - grep('O', names(annot), value=T))
df <- as_tibble(cbind(df, annot))
df <- rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
names(df) <- gsub('\\.', '', names(df))
df <- filter(df, !(is.na(ADJ1)|is.na(ADJ2)))
df <- filter(df, !(M %in% c('too', 'not', 'less') | M1 %in% c('too', 'not', 'less') | M2 %in% c('too', 'not', 'less')))
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
p <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/|\\.RDS', '', i)
)
save(p, file = paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ/', gsub('.*\\/', '', i)))
}
# load the sentiment dictionary
load('../res/sentiWords-db.RDS')
# load the sentiment dictionary
load('../../res/sentiWords-db.RDS')
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ')
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ', full.names = T)
fileslist
# annotate data
annot <- tokens(df$ADJ)
# annotate data
annot <- tokens(df$ADJ2)
annot <- tokens_lookup(annot, dictionary = sentiWords$num)
#rm(sentiWords)
annot <- sapply(annot, function(x) mean(as.numeric(unlist(x)),  na.rm = T))
df$sentiWords <- annot
rm(annot)
df
for(i in fileslist){
#i = fileslist[1]
print(i)
load(i)
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(k in 1:length(annot)) names(annot[[k]]) <- nannot[[k]]
for(k in 1:length(annot)) annot[[k]] <- suppressMessages(data.frame(t(annot[[k]])))
annot <- rbindlist(annot, fill=TRUE)
annot <- select(annot, - grep('O', names(annot), value=T))
df <- as_tibble(cbind(df, annot))
df <- rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
names(df) <- gsub('\\.', '', names(df))
df <- filter(df, !(is.na(ADJ1)|is.na(ADJ2)))
df <- filter(df, !(M %in% c('too', 'not', 'less') | M1 %in% c('too', 'not', 'less') | M2 %in% c('too', 'not', 'less')))
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
df <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/|\\.RDS', '', i)
)
# annotate data
annot <- tokens(df$ADJ2)
annot <- tokens_lookup(annot, dictionary = sentiWords$num)
#rm(sentiWords)
annot <- sapply(annot, function(x) mean(as.numeric(unlist(x)),  na.rm = T))
df$sentiWords <- annot
save(p, file = paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ/', gsub('.*\\/', '', i)))
}
#iterators
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/01-inductive-approach', full.names = T)
# load the sentiment dictionary
load('../../res/sentiWords-db.RDS')
for(i in fileslist){
#i = fileslist[1]
print(i)
load(i)
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(k in 1:length(annot)) names(annot[[k]]) <- nannot[[k]]
for(k in 1:length(annot)) annot[[k]] <- suppressMessages(data.frame(t(annot[[k]])))
annot <- rbindlist(annot, fill=TRUE)
annot <- select(annot, - grep('O', names(annot), value=T))
df <- as_tibble(cbind(df, annot))
df <- rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
names(df) <- gsub('\\.', '', names(df))
df <- filter(df, !(is.na(ADJ1)|is.na(ADJ2)))
df <- filter(df, !(M %in% c('too', 'not', 'less') | M1 %in% c('too', 'not', 'less') | M2 %in% c('too', 'not', 'less')))
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
df <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/|\\.RDS', '', i)
)
# annotate data
annot <- tokens(df$ADJ2)
annot <- tokens_lookup(annot, dictionary = sentiWords$num)
#rm(sentiWords)
annot <- sapply(annot, function(x) mean(as.numeric(unlist(x)),  na.rm = T))
df$sentiWords <- annot
save(p, file = paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ/', gsub('.*\\/', '', i)))
}
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ', full.names = T)
for(i in fileslist){
#i = fileslist[1]
print(i)
load(i)
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(k in 1:length(annot)) names(annot[[k]]) <- nannot[[k]]
for(k in 1:length(annot)) annot[[k]] <- suppressMessages(data.frame(t(annot[[k]])))
annot <- rbindlist(annot, fill=TRUE)
annot <- select(annot, - grep('O', names(annot), value=T))
df <- as_tibble(cbind(df, annot))
df <- rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
names(df) <- gsub('\\.', '', names(df))
df <- filter(df, !(is.na(ADJ1)|is.na(ADJ2)))
df <- filter(df, !(M %in% c('too', 'not', 'less') | M1 %in% c('too', 'not', 'less') | M2 %in% c('too', 'not', 'less')))
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
df <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/|\\.RDS', '', i)
)
# annotate data
annot <- tokens(df$ADJ2)
annot <- tokens_lookup(annot, dictionary = sentiWords$num)
#rm(sentiWords)
annot <- sapply(annot, function(x) mean(as.numeric(unlist(x)),  na.rm = T))
df$sentiWords <- annot
save(df, file = paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ/', gsub('.*\\/', '', i)))
}
#iterators
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/01-inductive-approach', full.names = T)
for(i in fileslist){
#i = fileslist[1]
print(i)
load(i)
annot <- strsplit(df$keyword, '\\s')
nannot <- strsplit(df$pattern, '')
for(k in 1:length(annot)) names(annot[[k]]) <- nannot[[k]]
for(k in 1:length(annot)) annot[[k]] <- suppressMessages(data.frame(t(annot[[k]])))
annot <- rbindlist(annot, fill=TRUE)
annot <- select(annot, - grep('O', names(annot), value=T))
df <- as_tibble(cbind(df, annot))
df <- rename(df, ADJ1 = 'A', ADJ2 = 'A.1')
names(df) <- gsub('\\.', '', names(df))
df <- filter(df, !(is.na(ADJ1)|is.na(ADJ2)))
df <- filter(df, !(M %in% c('too', 'not', 'less') | M1 %in% c('too', 'not', 'less') | M2 %in% c('too', 'not', 'less')))
combos <- apply(df[, c('ADJ1', 'ADJ2')], 1, function(x) paste0(sort(x), collapse = "_"))
combos <- table(combos)
df <- tibble(ADJ1 = sapply(strsplit(names(combos), '_'), '[[', 1),
ADJ2 = sapply(strsplit(names(combos), '_'), '[[', 2),
n = combos,
court = gsub('.*\\/|\\.RDS', '', i)
)
# annotate data
annot <- tokens(df$ADJ2)
annot <- tokens_lookup(annot, dictionary = sentiWords$num)
#rm(sentiWords)
annot <- sapply(annot, function(x) mean(as.numeric(unlist(x)),  na.rm = T))
df$sentiWords <- annot
save(df, file = paste0('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ/', gsub('.*\\/', '', i)))
}
fileslist <- list.files('/Volumes/INTENSO/legal_tc/output/01-inductive-approach-only-ADJ', full.names = T)
df <- lapply(fileslist, function(x){
load(x)
return(df)
})
df <- do.call(rbind, df)
df
library(ggplot2)
df %>% group_by(ADJ1, ADJ2) %>% summarise(sum(n))
df %>% group_by(ADJ1, ADJ2) %>% summarise(n = sum(n))
df %>% group_by(ADJ1, ADJ2) %>% summarise(n = sum(n)) %>% mutate(perc = n/sum(n))
aggr <- df %>% group_by(ADJ1, ADJ2) %>% summarise(n = sum(n)) %>% mutate(perc = n/sum(n))
aggr
aggr <- df %>% group_by(ADJ1, ADJ2) %>%
summarise(n = sum(n), sentiWords = unique(sentiWords)) %>%
mutate(perc = n/sum(n))
aggr
aggr %>% top_n(n = 20, wt = n)
aggr %>% ungroup %>% top_n(n = 20, wt = n)
df %>% group_by(ADJ1) %>% summarise(n = sum(n))
df %>% group_by(ADJ1) %>% summarise(n = sum(n)) %>% top_n(n = 20, wt = n)
df %>% group_by(ADJ1) %>% summarise(n = sum(n)) %>% top_n(n = 50, wt = n)
vec <- df %>% group_by(ADJ1) %>% summarise(n = sum(n)) %>% top_n(n = 50, wt = n)
aggr <- aggr %>% ungroup %>% filter(ADJ1 %in% vec)
View(aggr)
View(aggr)
aggr
aggr <- df %>% group_by(ADJ1, ADJ2) %>%
summarise(n = sum(n), sentiWords = unique(sentiWords)) %>%
mutate(perc = n/sum(n))
vec <- df %>% group_by(ADJ1) %>% summarise(n = sum(n)) %>% top_n(n = 50, wt = n)
vec
aggr <- aggr %>% ungroup %>% filter(ADJ1 %in% vec)
aggr <- df %>% group_by(ADJ1, ADJ2) %>%
summarise(n = sum(n), sentiWords = unique(sentiWords)) %>%
mutate(perc = n/sum(n))
vec <- df %>% group_by(ADJ1) %>% summarise(n = sum(n)) %>% top_n(n = 50, wt = n)
aggr
aggr %>% ungroup
aggr %>% ungroup %>% filter(ADJ1 %in% vec)
ADJ1 %in% vec
vec <- df %>% group_by(ADJ1) %>% summarise(n = sum(n)) %>% top_n(n = 50, wt = n) %>% pull(ADJ)
vec <- df %>% group_by(ADJ1) %>% summarise(n = sum(n)) %>% top_n(n = 50, wt = n) %>% pull(ADJ1)
vec
aggr <- aggr %>% ungroup %>% filter(ADJ1 %in% vec)
aggr
aggr <- df %>% group_by(ADJ1, ADJ2) %>%
summarise(n = sum(n), sentiWords = unique(sentiWords)) %>%
mutate(perc = n/sum(n))
vec <- df %>% group_by(ADJ1) %>% summarise(n = sum(n)) %>% top_n(n = 10, wt = n) %>% pull(ADJ1)
aggr <- aggr %>% ungroup %>% filter(ADJ1 %in% vec)
ggplot(aggr, aes(y = perc, x = sentiWords, colour = ADJ1)) +
geom_point() +
facet_wrap(~ADJ1)
